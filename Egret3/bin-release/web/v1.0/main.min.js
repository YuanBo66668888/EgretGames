var __reflect = this && this.__reflect ||
function(e, t, i) {
    e.__class__ = t,
    i ? i.push(t) : i = [t],
    e.__types__ = e.__types__ ? i.concat(e.__types__) : i
},
__extends = this && this.__extends ||
function(e, t) {
    function i() {
        this.constructor = e
    }
    for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
    e.prototype = null === t ? Object.create(t) : (i.prototype = t.prototype, new i)
},
game; !
function(e) {
    var t = function(t) {
        function i() {
            var e = t.call(this) || this;
            return e.isOpen = !1,
            e
        }
        return __extends(i, t),
        i.prototype.backGround = function() {
            this.backBG || (this.backBG = new egret.Bitmap, this.backBG.name = "panelbackground", this.backBG.texture = RES.getRes("panelbackground"), this.backBG.alpha = .6, this.backBG.width = e.XFKLayer.Ins.Stage.width, this.backBG.height = e.XFKLayer.Ins.Stage.height, e.XFKLayer.Ins.UiLayer.addChild(this.backBG))
        },
        i.prototype.show = function(t) {
            void 0 === t && (t = 0),
            this.isOpen = !0,
            0 == t && this.backGround(),
            e.XFKLayer.Ins.UiLayer.addChild(this)
        },
        i.prototype.close = function() {
            this.isOpen = !1,
            this.backBG && this.backBG.parent && (e.XFKLayer.Ins.UiLayer.removeChild(this.backBG), this.backBG = null),
            this.parent && this.parent.removeChild(this)
        },
        i.prototype.setWindowCenter = function() {
            this.x = e.XFKLayer.Ins.Stage.width - this.width >> 1,
            this.y = e.XFKLayer.Ins.Stage.height - this.height >> 1
        },
        i.prototype.setPoint = function(e) {
            this.x = e.x - (this.width >> 1),
            this.y = e.y - (this.height >> 1)
        },
        i
    } (egret.Sprite);
    e.BasePanel = t,
    __reflect(t.prototype, "game.BasePanel")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var i = t.call(this) || this;
            return i.Type = "sprite1",
            i.MoveSpeed = .1,
            i.Hp = 100,
            i.HpMax = 100,
            i.Atk = 1,
            i.direction = "",
            i.id = e.CommonFunction.Token,
            i
        }
        return __extends(i, t),
        Object.defineProperty(i.prototype, "ID", {
            get: function() {
                return this.id
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(i.prototype, "Direction", {
            get: function() {
                return this.direction
            },
            enumerable: !0,
            configurable: !0
        }),
        i.prototype.setHp = function(e) {
            this.Hp = e,
            this.dispatchEvent(new egret.Event("gm_hpChange"))
        },
        i.prototype.setDirection = function(e) {
            var t, i = e.x - this.x,
            n = e.y - this.y;
            0 == i && (n > 0 && (t = "down"), 0 > n && (t = "up")),
            0 == n && (i > 0 && (t = "right"), 0 > i && (t = "left")),
            t != this.direction && (this.direction = t, this.dispatchEvent(new egret.Event("gm_directionChange")))
        },
        i.prototype.OnUpdate = function(e) {},
        i.prototype.OnLoad = function(e) {},
        i.prototype.OnRelease = function() {},
        Object.defineProperty(i.prototype, "Point", {
            get: function() {
                return new egret.Point(this.x, this.y)
            },
            enumerable: !0,
            configurable: !0
        }),
        i
    } (egret.Sprite);
    e.BaseSprite = t,
    __reflect(t.prototype, "game.BaseSprite", ["game.IObject", "game.ILoad", "game.IUpdate"])
} (game || (game = {}));
var game; !
function(e) {
    var t = function(e) {
        function t() {
            return e.call(this) || this
        }
        return __extends(t, e),
        t.prototype.OnUpdate = function(e, t) {},
        t
    } (egret.Sprite);
    e.BaseDecoration = t,
    __reflect(t.prototype, "game.BaseDecoration", ["game.IDecoration"])
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var e = t.call(this) || this;
            return e.addEventListener(egret.Event.ADDED_TO_STAGE, e.onAddToStage, e),
            e
        }
        return __extends(i, t),
        i.prototype.onAddToStage = function(e) {
            this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this)
        },
        i.prototype.setTarget = function(e, t) {
            this.x = e.x,
            this.y = e.y,
            this.target = t;
            var i = new egret.Bitmap;
            i.texture = RES.getRes("bullet1"),
            i.x = -i.width / 2,
            i.y = -i.height / 2,
            this.addChild(i),
            this.radius = 10,
            this.MoveSpeed = 1
        },
        i.prototype.OnLoad = function(t) {
            t.addChild(this),
            e.ModuleManager.Instance.RegisterModule(this)
        },
        i.prototype.OnRelease = function() {
            null != this.parent && this.parent.removeChild(this),
            e.ModuleManager.Instance.UnRegisterModule(this)
        },
        i.prototype.OnUpdate = function(e) {
            t.prototype.OnUpdate.call(this, e),
            this.move(e)
        },
        i.prototype.move = function(t) {
            var i = e.CommonFunction.GetDistance(this.Point, this.target.Point);
            if (i <= this.radius) this.target.setHp(this.target.Hp - this.Atk),
            this.target = null,
            this.OnRelease();
            else {
                var n = e.CommonFunction.GetSpeed(this.target.Point, this.Point, this.MoveSpeed),
                s = 10 * n.x,
                o = 10 * n.y;
                this.x = this.x + s,
                this.y = this.y + o
            }
        },
        i
    } (e.BaseSprite);
    e.XFKBullet = t,
    __reflect(t.prototype, "game.XFKBullet")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(e) {
        function t(t, i, n) {
            return e.call(this, t, i, n) || this
        }
        return __extends(t, e),
        t
    } (egret.Event);
    t.gm_activation_bullet = "gm_activation_bullet",
    t.gm_moveEnd = "gm_moveEnd",
    t.gm_headquarters_hpChange = "gm_headquarters_hpChange",
    t.gm_monster_death = "gm_monster_death",
    e.BaseEvent = t,
    __reflect(t.prototype, "game.BaseEvent")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var i = t.call(this) || this;
            return i.IsStop = !1,
            i.dicData = new Object,
            i.lastTime = 0,
            e.XFKLayer.Ins.Stage.addEventListener(egret.Event.ENTER_FRAME, i.update, i),
            i
        }
        return __extends(i, t),
        Object.defineProperty(i, "Instance", {
            get: function() {
                return null == this.instance && (this.instance = new i),
                this.instance
            },
            enumerable: !0,
            configurable: !0
        }),
        i.prototype.GetModuleList = function() {
            return this.dicData
        },
        i.prototype.RegisterModule = function(e) {
            this.dicData[e.ID.toString()] = e
        },
        i.prototype.UnRegisterModule = function(e) {
            delete this.dicData[e.ID.toString()]
        },
        i.prototype.update = function(e) {
            if (!this.IsStop) for (var t in this.dicData) this.dicData[t].OnUpdate(egret.getTimer())
        },
        i
    } (egret.EventDispatcher);
    e.ModuleManager = t,
    __reflect(t.prototype, "game.ModuleManager")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(e) {
        function t() {
            return e.call(this) || this
        }
        return __extends(t, e),
        Object.defineProperty(t, "Ins", {
            get: function() {
                return null == this.ins && (this.ins = new t),
                this.ins
            },
            enumerable: !0,
            configurable: !0
        }),
        t.prototype.showPanel = function(e, t) {
            if (!this.isOpen) {
                this.show(0),
                this.callObject = t,
                this.callFun = e;
                var i, n, s = RES.getRes("turretskin");
                for (var o in s) {
                    i = RES.getRes(o + "_json"),
                    n = RES.getRes(o + "_png");
                    var r = new egret.MovieClipDataFactory(i, n),
                    a = new egret.MovieClip(r.generateMovieClipData(o));
                    this.addChild(a),
                    a.x = Math.abs(this.numChildren - 1) * a.width + 10,
                    a.gotoAndPlay(1, -1),
                    a.name = o,
                    a.touchEnabled = !0
                }
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTab, this)
            }
        },
        t.prototype.onTouchTab = function(e) {
            e.target instanceof egret.MovieClip && this.callFun.apply(this.callObject, [e.target.name]),
            this.closePanel()
        },
        t.prototype.closePanel = function() {
            if (this.isOpen) {
                for (this.close(), this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTab, this); this.numChildren > 0;) this.removeChildAt(0);
                this.callObject = null,
                this.callFun = null
            }
        },
        t
    } (e.BasePanel);
    e.TDSelectPanel = t,
    __reflect(t.prototype, "game.TDSelectPanel")
} (game || (game = {}));
var game; !
function(e) {
    var t = function() {
        function t() {}
        return Object.defineProperty(t, "Token", {
            get: function() {
                return this.token++
            },
            enumerable: !0,
            configurable: !0
        }),
        t.GetDistance = function(e, t) {
            return Math.sqrt((e.x - t.x) * (e.x - t.x) + (e.y - t.y) * (e.y - t.y))
        },
        t.GetSpeed = function(t, i, n) {
            var s = new egret.Point,
            o = e.CommonFunction.GetDistance(t, i);
            return 0 == o ? (s.x = 0, s.y = 0, s) : (s.x = n * (t.x - i.x) / o, s.y = n * (t.y - i.y) / o, s)
        },
        t.numPrecentage = function(e, t, i) {
            var n = Math.floor(e / t * i);
            return n > i && (n = i),
            n
        },
        t
    } ();
    t.token = 0,
    e.CommonFunction = t,
    __reflect(t.prototype, "game.CommonFunction")
} (game || (game = {}));
var AssetAdapter = function() {
    function e() {}
    return e.prototype.getAsset = function(e, t, i) {
        function n(n) {
            t.call(i, n, e)
        }
        if (RES.hasRes(e)) {
            var s = RES.getRes(e);
            s ? n(s) : RES.getResAsync(e, n, this)
        } else RES.getResByUrl(e, n, this, RES.ResourceItem.TYPE_IMAGE)
    },
    e
} ();
__reflect(AssetAdapter.prototype, "AssetAdapter", ["eui.IAssetAdapter"]);
var game; !
function(e) {
    var t = function() {
        function t() {}
        return t.dispatchEvent = function(t, i) {
            var n = new e.BaseEvent(t);
            n.object = i,
            this.dispatcher.dispatchEvent(n)
        },
        t.addEventListener = function(e, t, i, n, s) {
            this.dispatcher.addEventListener(e, t, i, n, s)
        },
        t.removeEventListener = function(e, t, i, n) {
            this.dispatcher.removeEventListener(e, t, i, n)
        },
        t
    } ();
    t.dispatcher = new egret.EventDispatcher,
    e.XFKControls = t,
    __reflect(t.prototype, "game.XFKControls")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var e = t.call(this) || this;
            return e._hp = 10,
            e.addEventListener(egret.Event.ADDED_TO_STAGE, e.onAddToStage, e),
            e
        }
        return __extends(i, t),
        i.prototype.onAddToStage = function(e) {
            this.init(),
            this.draw()
        },
        i.prototype.setHp = function(e) {
            this._hp = e,
            this.draw()
        },
        Object.defineProperty(i.prototype, "hp", {
            get: function() {
                return this._hp
            },
            set: function(t) {
                t != this.hp && (this.setHp(t), this.hpText.text = t.toString(), this._hp <= 0 && e.XFKControls.dispatchEvent(e.BaseEvent.gm_headquarters_hpChange, this))
            },
            enumerable: !0,
            configurable: !0
        }),
        i.prototype.OnUpdate = function(e, t) {
            this.OnUpdate(e, t)
        },
        i.prototype.OnLoad = function(t) {
            t.addChild(this),
            e.XFKControls.addEventListener(e.BaseEvent.gm_moveEnd, this.gm_moveEnd, this)
        },
        i.prototype.OnRelease = function() {
            null != this.parent && this.parent.removeChild(this),
            e.XFKControls.removeEventListener(e.BaseEvent.gm_moveEnd, this.gm_moveEnd, this)
        },
        i.prototype.init = function() {
            var e = RES.getRes("num_fnt");
            this.hpText = new egret.BitmapText,
            this.hpText.font = e,
            this.hpText.text = this.hp.toString(),
            this.addChild(this.hpText);
            var t = new egret.Shape;
            t.graphics.beginFill(16777056, 1),
            t.graphics.drawRect(0, 0, 8, 8),
            t.graphics.endFill()
        },
        i.prototype.draw = function() {
            null != this.parent && (this.hpText.x = -this.hpText.width >> 1, this.hpText.y = -this.hpText.height >> 1)
        },
        i.prototype.gm_moveEnd = function(t) {
            t.object instanceof e.XFKSprite && (this.hp = this.hp - t.object.Atk)
        },
        i
    } (e.BaseDecoration);
    e.XFKDecoration = t,
    __reflect(t.prototype, "game.XFKDecoration")
} (game || (game = {}));
var game; !
function(e) {
    var t = function() {
        function e() {
            this.LoadingView = new LoadingUI
        }
        return Object.defineProperty(e, "Ins", {
            get: function() {
                return null == this.ins && (this.ins = new e),
                this.ins
            },
            enumerable: !0,
            configurable: !0
        }),
        e.prototype.LoadingViewOnOff = function() {
            this.Stage.contains(this.LoadingView) ? this.Stage.removeChild(this.LoadingView) : (this.Stage.addChild(this.LoadingView), this.LoadingView.x = this.Stage.width - this.LoadingView.width >> 1)
        },
        e.prototype.SetLoadingView = function(e, t) {
            this.LoadingView.setProgress(e, t)
        },
        e.prototype.init = function() {
            this.GameLayer = new egret.DisplayObjectContainer,
            this.GameLayer.name = "gameLayer",
            this.Stage.addChild(this.GameLayer),
            this.BgLayer = new egret.DisplayObjectContainer,
            this.BgLayer.name = "bgLayer",
            this.GameLayer.addChild(this.BgLayer),
            this.NpcLayer = new egret.DisplayObjectContainer,
            this.NpcLayer.name = "NpcLayer",
            this.GameLayer.addChild(this.NpcLayer),
            this.DecorationLayer = new egret.DisplayObjectContainer,
            this.DecorationLayer.name = "DecorationLayer",
            this.GameLayer.addChild(this.DecorationLayer),
            this.UiLayer = new egret.DisplayObjectContainer,
            this.UiLayer.name = "UiLayer",
            this.Stage.addChild(this.UiLayer),
            this.GuiLayer = new egret.DisplayObjectContainer,
            this.GuiLayer.name = "GuiLayer",
            this.Stage.addChild(this.GuiLayer)
        },
        e.prototype.OnLoad = function(e) {
            this.Stage = e,
            this.init()
        },
        e
    } ();
    e.XFKLayer = t,
    __reflect(t.prototype, "game.XFKLayer")
} (game || (game = {}));
var game; !
function(e) {
    var t = function() {
        function t() {
            this.sceneKey = "scene1",
            this.isInit = !1,
            this.lastime = 0,
            this.id = e.CommonFunction.Token
        }
        return Object.defineProperty(t.prototype, "ID", {
            get: function() {
                return this.id
            },
            enumerable: !0,
            configurable: !0
        }),
        t.prototype.OnLoad = function(t) {
            this.OnRelease(),
            e.ModuleManager.Instance.RegisterModule(this),
            this.sceneKey = t,
            this.startTime = egret.getTimer(),
            e.XFKControls.addEventListener(e.BaseEvent.gm_headquarters_hpChange, this.gm_headquarters_hpChange, this),
            e.XFKControls.addEventListener(e.BaseEvent.gm_activation_bullet, this.gm_activation_bullet, this),
            e.XFKControls.addEventListener(e.BaseEvent.gm_monster_death, this.gm_monster_death, this),
            this.resLoad()
        },
        t.prototype.OnRelease = function() {
            e.ModuleManager.Instance.UnRegisterModule(this),
            e.XFKControls.removeEventListener(e.BaseEvent.gm_headquarters_hpChange, this.gm_headquarters_hpChange, this),
            e.XFKControls.removeEventListener(e.BaseEvent.gm_activation_bullet, this.gm_activation_bullet, this),
            e.XFKControls.removeEventListener(e.BaseEvent.gm_monster_death, this.gm_monster_death, this),
            this.removeAll()
        },
        t.prototype.resLoad = function() {
            e.XFKLayer.Ins.LoadingViewOnOff(),
            RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this),
            RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this),
            RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this),
            RES.loadGroup(this.sceneKey)
        },
        t.prototype.onResourceLoadComplete = function(t) {
            t.groupName == this.sceneKey && (e.XFKLayer.Ins.LoadingViewOnOff(), RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), this.init())
        },
        t.prototype.onResourceLoadError = function(e) {
            console.warn("Group:" + e.groupName + " 中有加载失败的项目"),
            this.onResourceLoadComplete(e)
        },
        t.prototype.onResourceProgress = function(t) {
            t.groupName == this.sceneKey && e.XFKLayer.Ins.SetLoadingView(t.itemsLoaded, t.itemsTotal)
        },
        t.prototype.init = function() {
            this.createBG(),
            this.creatDecration(),
            this.creatTurret(),
            this.creatAction(),
            this.isInit = !0
        },
        t.prototype.createBG = function() {
            var t = new egret.Bitmap;
            t.texture = RES.getRes(this.sceneKey + "bg_jpg"),
            e.XFKLayer.Ins.BgLayer.addChild(t)
        },
        t.prototype.creatDecration = function() {
            var t = new e.XFKDecoration;
            t.x = 780,
            t.y = 510,
            t.setHp(10),
            t.OnLoad(e.XFKLayer.Ins.DecorationLayer)
        },
        t.prototype.creatTurret = function() {
            for (var t, i = RES.getRes(this.sceneKey + "turret_json"), n = 0; n < i.turret.length; n++) t = new e.XFKTurret,
            t.Parse(i.turret[n]),
            t.OnLoad(e.XFKLayer.Ins.DecorationLayer)
        },
        t.prototype.creatAction = function() {
            var e = RES.getRes(this.sceneKey + "sprite_json");
            this.action = new Array;
            for (var t, i = 0; i < e.sprite.length; i++) {
                e.sprite[i].path = e.Path,
                e.sprite[i].keyframe = !1,
                e.sprite[i].delay = parseInt(e.sprite[i].delay);
                for (var n = 0; n < e.sprite[i].count; n++) t = this.action.push(e.sprite[i]),
                t == e.sprite[i].count && (this.action[t - 1].keyframe = !0)
            }
        },
        t.prototype.creatSp = function() {
            if (this.action.length > 0 && (console.log(this.startTime + this.action[0].delay, egret.getTimer()), this.startTime + this.action[0].delay <= egret.getTimer())) {
                var t;
                t = new e.XFKSprite,
                t.Parse(this.action.shift()),
                t.OnLoad(e.XFKLayer.Ins.NpcLayer)
            }
        },
        t.prototype.gm_headquarters_hpChange = function(t) {
            e.ModuleManager.Instance.IsStop = !0;
            var i = new eui.Panel;
            i.title = "游戏结束",
            i.horizontalCenter = 0,
            i.verticalCenter = 0,
            i.addEventListener(eui.UIEvent.CLOSING,
            function(e) {
                location.reload()
            },
            this),
            e.XFKLayer.Ins.GuiLayer.addChild(i)
        },
        t.prototype.gm_activation_bullet = function(t) {
            var i = new e.XFKBullet;
            i.setTarget(t.object[0], t.object[1]),
            i.OnLoad(e.XFKLayer.Ins.NpcLayer)
        },
        t.prototype.gm_monster_death = function(t) {
            var i = new e.XFKSprite;
            e.XFKConfig.Ins.addGlob(i.Glob)
        },
        t.prototype.removeAll = function() {
            for (; e.XFKLayer.Ins.NpcLayer.numChildren > 0;) {
                var t = e.XFKLayer.Ins.NpcLayer.removeChildAt(0);
                t.OnRelease()
            }
            for (; e.XFKLayer.Ins.BgLayer.numChildren > 0;) e.XFKLayer.Ins.BgLayer.removeChildAt(0);
            for (; e.XFKLayer.Ins.DecorationLayer.numChildren > 0;) {
                var t = e.XFKLayer.Ins.DecorationLayer.removeChildAt(0);
                t.OnRelease()
            }
        },
        t.prototype.OnUpdate = function(e) {
            this.isInit && e > this.lastime && (this.creatSp(), this.lastime = e + 800)
        },
        t
    } ();
    e.XFKScene = t,
    __reflect(t.prototype, "game.XFKScene", ["game.IObject", "game.ILoad", "game.IUpdate"])
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var i = t.call(this) || this;
            return i.hpImg = new e.XFKHpImg,
            i.Path = [],
            i.addEventListener(egret.Event.ADDED_TO_STAGE, i.onAddToStage, i),
            i
        }
        return __extends(i, t),
        i.prototype.onAddToStage = function(e) {
            this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this),
            this.addEventListener("gm_directionChange", this.onDirectionChange, this),
            this.addEventListener("gm_hpChange", this.onHpChange, this),
            this.x = this.Path[0].x,
            this.y = this.Path[0].y,
            this.setDirection(this.Path[1])
        },
        i.prototype.OnLoad = function(i) {
            t.prototype.OnLoad.call(this, i),
            i.addChild(this),
            e.ModuleManager.Instance.RegisterModule(this),
            this.hpImg.OnLoad(this)
        },
        i.prototype.OnRelease = function() {
            t.prototype.OnRelease.call(this),
            null != this.sp && this.sp.stop(),
            this.removeEventListener("gm_directionChange", this.onDirectionChange, this),
            this.removeEventListener("gm_hpChange", this.onHpChange, this),
            null != this.parent && this.parent.removeChild(this),
            e.ModuleManager.Instance.UnRegisterModule(this),
            this.hpImg.OnRelease()
        },
        i.prototype.onDirectionChange = function(e) {
            var t = e.target,
            i = RES.getRes(this.Type + "_" + t.Direction + "_json"),
            n = RES.getRes(this.Type + "_" + this.Direction + "_png"),
            s = new egret.MovieClipDataFactory(i, n);
            null != this.sp && (this.sp.parent.removeChild(this.sp), this.sp.stop()),
            this.sp = new egret.MovieClip(s.generateMovieClipData(this.Type + "_" + this.Direction)),
            this.addChild(this.sp),
            this.sp.x = -20,
            this.sp.y = -30,
            this.sp.gotoAndPlay(1, -1);
            var o = new egret.Shape;
            o.graphics.beginFill(16777056, 1),
            o.graphics.drawRect(0, 0, 3, 3),
            o.graphics.endFill()
        },
        i.prototype.onHpChange = function(t) {
            this.hpImg.sethp(this.Hp, this.HpMax),
            this.Hp <= 0 && (e.XFKControls.dispatchEvent(e.BaseEvent.gm_monster_death, this), this.OnRelease())
        },
        i.prototype.OnUpdate = function(e) {
            t.prototype.OnUpdate.call(this, e),
            this.move(e)
        },
        i.prototype.move = function(t) {
            if (0 != this.Path.length) {
                var i = this.Path[0],
                n = e.CommonFunction.GetSpeed(i, new egret.Point(this.x, this.y), this.MoveSpeed),
                s = 10 * n.x,
                o = 10 * n.y;
                if (Math.abs(i.x - this.x) <= Math.abs(s) && Math.abs(i.y - this.y) <= Math.abs(o)) {
                    if (this.x = i.x, this.y = i.y, this.Path.shift(), 0 == this.Path.length) return e.XFKControls.dispatchEvent(e.BaseEvent.gm_moveEnd, this),
                    void this.OnRelease();
                    this.setDirection(this.Path[0])
                } else this.x = this.x + s,
                this.y = this.y + o
            }
        },
        i.prototype.Parse = function(e) {
            this.Hp = parseInt(e.hp),
            this.HpMax = parseInt(e.hp),
            this.Glob = parseInt(e.glob),
            this.MoveSpeed = parseFloat(e.speed),
            this.Type = e.type,
            this.Path = [];
            for (var t = 0; t < e.path.length; t++) this.Path.push(new egret.Point(parseInt(e.path[t].x), parseInt(e.path[t].y)))
        },
        i
    } (e.BaseSprite);
    e.XFKSprite = t,
    __reflect(t.prototype, "game.XFKSprite")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var e = t.call(this) || this;
            return e.lastTime = 0,
            e
        }
        return __extends(i, t),
        i.prototype.creatSp = function() {
            var e = RES.getRes(this.skin + "_json"),
            t = RES.getRes(this.skin + "_png"),
            i = new egret.MovieClipDataFactory(e, t);
            null != this.sp && (this.sp.parent.removeChild(this.sp), this.sp.stop()),
            this.sp = new egret.MovieClip(i.generateMovieClipData(this.skin)),
            this.addChild(this.sp),
            this.sp.x = -this.sp.width / 2 + this.offsetx,
            this.sp.y = -this.sp.height / 2 + this.offsety,
            this.sp.gotoAndPlay(1, -1),
            this.sp.touchEnabled = !0
        },
        i.prototype.creatBullet = function(t, i) {
            var n = egret.getTimer();
            console.log(n, this.lastTime),
            n > this.lastTime && (this.lastTime = n + this.MoveSpeed, e.XFKControls.dispatchEvent(e.BaseEvent.gm_activation_bullet, [t, i]), this.changOrientation(i.Point))
        },
        i.prototype.searchTarget = function() {
            var t, i = e.ModuleManager.Instance.GetModuleList();
            for (var n in i) i[n] instanceof e.XFKSprite && (t = i[n], e.CommonFunction.GetDistance(t.Point, this.Point) <= this.radius && this.creatBullet(this, t))
        },
        i.prototype.changOrientation = function(e) {
            var t = e.x - this.x,
            i = e.y - this.y,
            n = Math.atan2(i, t);
            n *= 180 / Math.PI,
            n -= 180,
            0 > n && (n += 360);
            var s = Math.round(this.sp.totalFrames * n / 360);
            this.sp.gotoAndStop(s)
        },
        i.prototype.OnLoad = function(i) {
            t.prototype.OnLoad.call(this, i),
            i.addChild(this),
            this.creatSp(),
            this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTab, this),
            e.ModuleManager.Instance.RegisterModule(this)
        },
        i.prototype.OnRelease = function() {
            t.prototype.OnRelease.call(this),
            null != this.sp && this.sp.stop(),
            null != this.parent && this.parent.removeChild(this),
            this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTab, this),
            e.ModuleManager.Instance.UnRegisterModule(this)
        },
        i.prototype.OnUpdate = function(e) {
            t.prototype.OnUpdate.call(this, e),
            0 != this.MoveSpeed && this.searchTarget()
        },
        i.prototype.onTouchTab = function(t) {
            null == this.radiusShap && (this.radiusShap = new egret.Shape, this.radiusShap.graphics.beginFill(16777056, 1), this.radiusShap.graphics.drawCircle(0, 0, this.radius), this.radiusShap.graphics.endFill(), this.radiusShap.alpha = .2, this.addChild(this.radiusShap)),
            e.TDSelectPanel.Ins.showPanel(this.onChange, this),
            e.TDSelectPanel.Ins.setPoint(new egret.Point(this.Point.x, this.Point.y + this.sp.height))
        },
        i.prototype.onChange = function(e) {
            this.parseSkin(e),
            this.creatSp(),
            null != this.radiusShap && (this.removeChild(this.radiusShap), this.radiusShap = null)
        },
        i.prototype.Parse = function(e) {
            this.name = e.name,
            this.x = parseInt(e.x),
            this.y = parseInt(e.y),
            this.parseSkin(e.type)
        },
        i.prototype.parseSkin = function(e) {
            var t = RES.getRes("turretskin");
            this.skin = e,
            this.offsetx = parseInt(t[e].offsetx),
            this.offsety = parseInt(t[e].offsety),
            this.radius = parseInt(t[e].radius),
            this.MoveSpeed = parseInt(t[e].speed),
            this.glob = parseInt(t[e].glob)
        },
        i
    } (e.BaseSprite);
    e.XFKTurret = t,
    __reflect(t.prototype, "game.XFKTurret")
} (game || (game = {}));
var game; !
function(e) {
    var t = function() {
        function e() {
            this.Glob = 0,
            this.Count = 0
        }
        return Object.defineProperty(e, "Ins", {
            get: function() {
                return null == this.ins && (this.ins = new e),
                this.ins
            },
            enumerable: !0,
            configurable: !0
        }),
        e.prototype.addGlob = function(e) {
            this.Glob = this.Glob + e
        },
        e
    } ();
    e.XFKConfig = t,
    __reflect(t.prototype, "game.XFKConfig")
} (game || (game = {}));
var game; !
function(e) {
    var t = function(t) {
        function i() {
            var e = t.call(this) || this;
            return e.hpWidth = 44,
            e
        }
        return __extends(i, t),
        i.prototype.OnLoad = function(e) {
            this.parentSprite = e,
            this.init()
        },
        i.prototype.OnRelease = function() {
            for (null != this.parent && this.parent.removeChild(this); this.numChildren > 0;) this.removeChildAt(0);
            this.parentSprite = null
        },
        i.prototype.init = function() {
            this.hpBg = new egret.Bitmap,
            this.hpBg.texture = RES.getRes("spritehpbg_png"),
            this.hp = new egret.Bitmap,
            this.hp.texture = RES.getRes("spritehp_png"),
            this.hp.x = 1,
            this.hp.y = 1,
            this.addChild(this.hpBg),
            this.addChild(this.hp)
        },
        i.prototype.sethp = function(t, i) {
            this.hp.width = e.CommonFunction.numPrecentage(t, i, this.hpWidth),
            this.hp.x = 1,
            this.hp.y = 1,
            null == this.parent && (this.parentSprite.addChild(this), this.x = -this.width >> 1, this.y = -40)
        },
        i
    } (e.BaseDecoration);
    e.XFKHpImg = t,
    __reflect(t.prototype, "game.XFKHpImg")
} (game || (game = {}));
var LoadingUI = function(e) {
    function t() {
        var t = e.call(this) || this;
        return t.createView(),
        t
    }
    return __extends(t, e),
    t.prototype.createView = function() {
        this.textField = new egret.TextField,
        this.addChild(this.textField),
        this.textField.y = 300,
        this.textField.width = 480,
        this.textField.height = 100,
        this.textField.textAlign = "center"
    },
    t.prototype.setProgress = function(e, t) {
        this.textField.text = "Loading..." + e + "/" + t
    },
    t
} (egret.Sprite);
__reflect(LoadingUI.prototype, "LoadingUI");
var Main = function(e) {
    function t() {
        var t = e.apply(this, arguments) || this;
        return t.isThemeLoadEnd = !1,
        t.isResourceLoadEnd = !1,
        t._isStop = !0,
        t
    }
    return __extends(t, e),
    t.prototype.createChildren = function() {
        e.prototype.createChildren.call(this);
        var t = new AssetAdapter;
        this.stage.registerImplementation("eui.IAssetAdapter", t),
        this.stage.registerImplementation("eui.IThemeAdapter", new ThemeAdapter),
        this.loadingView = new LoadingUI,
        this.stage.addChild(this.loadingView),
        this.loadingView.x = this.stage.stageWidth - this.loadingView.width >> 1,
        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this),
        RES.loadConfig("resource/default.res.json", "resource/")
    },
    t.prototype.onConfigComplete = function(e) {
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
        var t = new eui.Theme("resource/default.thm.json", this.stage);
        t.addEventListener(eui.UIEvent.COMPLETE, this.onThemeLoadComplete, this),
        game.XFKLayer.Ins.OnLoad(this.stage),
        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this),
        RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this),
        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this),
        RES.loadGroup("preload"),
        RES.loadGroup("scene1")
    },
    t.prototype.onThemeLoadComplete = function() {
        this.isThemeLoadEnd = !0,
        this.createScene()
    },
    t.prototype.onResourceLoadComplete = function(e) {
        "preload" == e.groupName || "scene1" == e.groupName && (this.stage.removeChild(this.loadingView), RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), this.isResourceLoadEnd = !0, this.createScene())
    },
    t.prototype.createScene = function() {
        if (this.isThemeLoadEnd && this.isResourceLoadEnd) {
            var e = new eui.Button;
            e.x = 0,
            e.label = "关卡1",
            e.name = "scene1",
            e.height = 40,
            e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onButtonClick, this);
            var t = new eui.Button;
            t.x = 100,
            t.label = "关卡2",
            t.name = "scene2",
            t.height = 40,
            t.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onButtonClick, this);
            var i = new eui.Button;
            i.x = 200,
            i.label = "开始",
            i.name = "isStop",
            i.height = 40,
            i.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onButtonStop, this);
            game.XFKLayer.Ins.GuiLayer;
            game.XFKLayer.Ins.GuiLayer.addChild(e),
            game.XFKLayer.Ins.GuiLayer.addChild(t),
            game.XFKLayer.Ins.GuiLayer.addChild(i),
            game.ModuleManager.Instance.IsStop = this._isStop,
            e.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        }
    },
    t.prototype.onButtonClick = function(e) {
        this.scene && this.scene.OnRelease(),
        this.scene = new game.XFKScene,
        this.scene.OnLoad(e.target.name)
    },
    t.prototype.onButtonStop = function(e) {
        this._isStop ? e.target.label = "暂停": e.target.label = "开始",
        this._isStop = !this._isStop,
        game.ModuleManager.Instance.IsStop = this._isStop
    },
    t.prototype.onResourceLoadError = function(e) {
        console.warn("Group:" + e.groupName + " has failed to load"),
        this.onResourceLoadComplete(e)
    },
    t.prototype.onResourceProgress = function(e) {
        "preload" == e.groupName && this.loadingView.setProgress(e.itemsLoaded, e.itemsTotal)
    },
    t
} (eui.UILayer);
__reflect(Main.prototype, "Main");
var ThemeAdapter = function() {
    function e() {}
    return e.prototype.getTheme = function(e, t, i, n) {
        function s(e) {
            t.call(n, e)
        }
        function o(t) {
            t.resItem.url == e && (RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, o, null), i.call(n))
        }
        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, o, null),
        RES.getResByUrl(e, s, this, RES.ResourceItem.TYPE_TEXT)
    },
    e
} ();
__reflect(ThemeAdapter.prototype, "ThemeAdapter", ["eui.IThemeAdapter"]);